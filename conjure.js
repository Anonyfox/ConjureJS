// Generated by CoffeeScript 1.6.3
(function() {
  var Conjure, getArgumentNames, isString,
    __slice = [].slice;

  Conjure = (typeof exports !== "undefined" && exports !== null) && exports || (this.Conjure = {});

  Conjure.activate = function() {
    var a;
    Object.prototype.enchant = function(traits) {
      var trait, _i, _len;
      if (!(traits != null ? traits.length : void 0)) {
        traits = [traits];
      }
      for (_i = 0, _len = traits.length; _i < _len; _i++) {
        trait = traits[_i];
        trait.enchant(this);
      }
      return this;
    };
    Object.defineProperty(Object.prototype, "mirror", {
      value: function() {
        return JSON.parse(JSON.stringify(this));
      },
      enumerable: false
    });
    a = {};
    console.log(a.enchant);
    console.log(a.mirror);
    Object.prototype.absorb = function(objects) {
      var k, o, v, _i, _len;
      if (!(objects != null ? objects.length : void 0)) {
        objects = [objects];
      }
      for (_i = 0, _len = objects.length; _i < _len; _i++) {
        o = objects[_i];
        for (k in o) {
          v = o[k];
          this[k] || (this[k] = v);
        }
      }
      return this;
    };
    Object.prototype.dispel = function() {
      return Object.keys(this);
    };
    return this;
  };

  Conjure.grimoire = function() {};

  Conjure.spell = function(fn) {
    var cache;
    cache = {};
    return function() {
      var args, key;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      key = JSON.stringify(args);
      if (cache[key]) {
        return cache[key];
      } else {
        return cache[key] = fn.apply(null, args);
      }
    };
  };

  Conjure.aura = function(fn) {
    var afn, signature;
    signature = getArgumentNames(fn);
    afn = function() {
      var args, i, p, _i, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      for (i = _i = 0, _ref = args.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        afn[signature[i]] = args[i];
      }
      return fn.apply(null, (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = signature.length; _j < _len; _j++) {
          p = signature[_j];
          _results.push(afn[p]);
        }
        return _results;
      })());
    };
    return afn;
  };

  /* private helpers*/


  getArgumentNames = function(fn) {
    return fn.toString().replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/)|(\s))/mg, '').match(/^function\s*[^\(]*\(\s*([^\)]*)\)/m)[1].split(/,/);
  };

  isString = function(x) {
    return typeof x === 'string' || x instanceof String;
  };

}).call(this);
